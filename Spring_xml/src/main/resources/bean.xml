<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期-->
    <!--创建bean的三种方式
        第一种方式：使用默认构造函数创建
            在spring的配置文件中使用bean标签配以id和class属性之后，且没有其他属性和标签时。
            采用的就是默认构造函数创建Bean对象，此时如果类中没有默认构造函数，则属性无法创建-->
    <!--<bean id="accountService" class="com.yxj.service.impl.AccountServiceImpl"></bean>-->
    <!--第二种方式：(jar包中)使用普通工厂创建对象（使用某个类中的方法创建对象并存入spring容器）-->
    <!--<bean id="instanceFactory" class="com.yxj.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountFactroy" "></bean>-->
    <!--第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）-->
    <!--<bean id="accountService" class="com.yxj.factory.StaticFactory" factory-method="getAccountFactroy"></bean>-->

    <!--bean的作用范围
        bean标签的scope属性:
            作用:用于指定bean的作用范围
            取值:
                singleton:单例的(默认值)
                prototype:多例的
                request:作用于web应用的请求范围
                session:作用于web应用的会话范围
                global-session:作用于集群环境的会话范围(全局会话范围),当不是集群环境是,他就是session-->
    <!--bean对象的生命周期
        单例对象
            出生:当容器创建时出生
            活着:只要容器还在,对象一直活着
            死亡:容器销毁,对象死亡
            总结:单例对象的生命周期和容器相同
        多例对象
            出生:当我们使用对象时spring框架为我们创建
            活着:对象只要是使用过程中就一直活着
            死亡:当对象长时间不用且没有别的对象引用是java的垃圾回收器回收-->
    <!--spring中的依赖注入
        依赖注入:Dependency Injection
        IOC的作用:降低程序间的耦合(依赖关系)
        依赖关系的管理:以后都交给了spring来维护
        在当前类中需要用到其他类的对象,由spring为我们提供,我们只需要在配置文件中说明
        依赖关系的维护:就称之为依赖注入
        依赖注入:能注入的数据有三类
            基本类型和String
            其他bean类型(在配置文件中或注解配置过的bean)
            复杂类型/集合类型
        注入的方式:有三种
            使用构造函数提供
            使用set提供
            使用注解提供-->

    <!--构造函数注入
        使用的标签:constructor-arg
        标签出现的位置:bean标签的内部
        标签中的属性
            type:用于指定要注入的数据类型,该数据类型也是构造函数中某个或某些参数的类型
            index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值.索引位置从0开始
            name:用于指定给构造函数中指定名称的参数赋值
            ***************以上三个用于给构造函数中那个参数赋值******************
            value:用于提供基本类型和string类型的数据
            ref:用于指定其他bean类型数据,他指的就是在spring的ioc核心容器中出现过的bean对象

        优势:在获取bean对象时,注入数据是必须的操作,否则对象无法创建成功
        弊端:改变了bean对象的实例化方式.是我们在创建对象是如果用不到这些数据,也必须提供
    -->
<!--    <bean id="accountService" class="com.yxj.service.impl.AccountServiceImpl">-->
<!--        <constructor-arg name="name" value="泰斯特"></constructor-arg>-->
<!--        <constructor-arg name="age" value="18"></constructor-arg>-->
<!--        <constructor-arg name="birthday" ref="now"></constructor-arg>-->
<!--    </bean>-->
    <bean id="now" class="java.util.Date"></bean>

    <!--set方法注入  更常用的方式
        优势:创建对象时没有明确的限制,可以直接使用默认构造函数
        弊端:如果有某个成员必须有值,则获取对象是有可能set方法没有执行
    -->
    <bean id="accountService2" class="com.yxj.service.impl.AccountServiceImpl2">
        <property name="name" value="泰斯特"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean>
    <!--复杂类型的注入/集合类型的注入
        用于给list结构集合注入的标签:list array set
        用于给map结构集合注入的标签:map props
        结构相同,标签可以互换
    -->
    <bean id="accountService3" class="com.yxj.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="testA" value="aaa"></entry>
                        <entry key="testB" >
                            <value>bbb</value>
                        </entry>
            </map>
        </property>
        <property name="myProps">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>
    </bean>
<!--    ********************************************************************-->
    <!--目标对象-->
    <bean id="accountService" class="com.yxj.service.impl.AccountServiceImpl"/>
    <!--通知类-->
    <bean id="logger" class="com.yxj.ui.Logger"/>

    <!--配置aop-->
    <aop:config>
        <aop:pointcut id="pc" expression="execution(* com.yxj.service.impl.*.*(..))"/>
        <!--配置切面，id是切面的唯一标识，ref时通知类的id-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知
                前置通知
            <aop:before method="printLog" pointcut-ref="pc"></aop:before>
            &lt;!&ndash;最终通知&ndash;&gt;
            <aop:after method="printLog" pointcut-ref="pc"/>
            &lt;!&ndash;异常通知&ndash;&gt;
            <aop:after-throwing method="printLog" pointcut-ref="pc"/>
            &lt;!&ndash;后置通知&ndash;&gt;
            <aop:after-returning method="printLog" pointcut-ref="pc"/>-->
            <aop:around method="aroundPrintLog" pointcut-ref="pc"/>
        </aop:aspect>
    </aop:config>

</beans>